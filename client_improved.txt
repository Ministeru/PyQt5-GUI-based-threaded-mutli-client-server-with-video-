import sys
import os
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from vidstream import *
import socket
import threading
from threading import Thread
from screeninfo import get_monitors
import cv2, pickle, struct, imutils
import numpy as np
import pyttsx3
import time

for m in get_monitors():
    strt = str(m)
MONITOR_WIDTH = int(int((strt.split(",")[2]).replace("width=","")) * 0.5)
MONITOR_HEIGHT = int(int((strt.split(",")[3]).replace("height=","")) * 0.85)

engine = pyttsx3.init()
engine.setProperty('rate', 180)
BUTTON_WIDTH = int(MONITOR_WIDTH*0.175)
BUTTON_HEIGHT = int(MONITOR_HEIGHT*0.058)
INI_WIDTH = int(MONITOR_WIDTH*0.35)
INI_HEIGHT = int(MONITOR_HEIGHT*0.058)

TCP_IP = socket.gethostbyname(socket.gethostname()) 
# TCP_IP = "192.168.1.82"
TCP_PORT = 7777 

class Window(QDialog):
    def __init__(self):
        super().__init__()
        self.setFixedSize(MONITOR_WIDTH , MONITOR_HEIGHT)
        self.setWindowTitle("Client")
        self.setStyleSheet("""
        background-color: #262626;
        color: #FFFFFF;
        font-family: Aharoni;
        font-size: 36px;

        QPushButton {
        background-color: #2ABf9E;
        padding: 20px;
        font-size: 36px; 

        .monospace {
        font-family: "Lucida Console", Courier, monospace;
        }
        }
        """)
        
        self.chatTextField=QLineEdit(self)
        self.chatTextField.setFixedSize(INI_WIDTH + int(MONITOR_WIDTH*0.07),INI_HEIGHT)

        self.btnSend = QPushButton("SEND",self)
        self.btnSend.setFixedSize(BUTTON_WIDTH, BUTTON_HEIGHT)
        self.btnSend.move(200,460)
        self.btnSend.setStyleSheet("border: 2px solid white")
        self.btnSend.clicked.connect(self.send)

        self.chat = QTextEdit()
        self.chat.setFixedSize(int(MONITOR_WIDTH*0.6),int(MONITOR_HEIGHT*0.48))
        self.chat.setStyleSheet("border: 2px solid white; font-family: Arial; font-size: 26px;")
        self.chat.setReadOnly(True)

        self.cls_button = QPushButton("Clear")
        self.cls_button.setFixedSize(BUTTON_WIDTH, BUTTON_HEIGHT)
        self.cls_button.setStyleSheet("border: 2px solid white")
        self.cls_button.clicked.connect(self.clear)

        self.exit_button = QPushButton("Exit")
        self.exit_button.setFixedSize(BUTTON_WIDTH, BUTTON_HEIGHT)
        self.exit_button.setStyleSheet("border: 2px solid white")
        self.exit_button.clicked.connect(self.exit)

        self.video_button = QPushButton("Display Video")
        self.video_button.setFixedSize(BUTTON_WIDTH, BUTTON_HEIGHT)
        self.video_button.setStyleSheet("border: 2px solid white")

        self.FeedLabel = QLabel(self)
        self.FeedLabel.setFixedSize(int(MONITOR_WIDTH*0.445), int(MONITOR_HEIGHT*0.35))
        self.FeedLabel.setStyleSheet("border: 2px solid white")
        p = QPixmap('grey.jpg')
        self.FeedLabel.setPixmap(p)
        self.FeedLabel.resize(int(MONITOR_WIDTH*0.445), int(MONITOR_HEIGHT*0.35))

        self.grid_layout = QGridLayout(self)

        self.setLayout(self.grid_layout)
        self.grid_layout.setContentsMargins(20,20,10,10) 

        self.grid_layout.addWidget(self.btnSend, 7, 1, alignment=Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignRight)
        self.grid_layout.addWidget(self.chat, 6 ,1, alignment=Qt.AlignmentFlag.AlignCenter)
        self.grid_layout.addWidget(self.chatTextField, 7, 1, alignment=Qt.AlignmentFlag.AlignTop)
        self.grid_layout.addWidget(self.cls_button, 4, 1, alignment=Qt.AlignmentFlag.AlignLeft)
        self.grid_layout.addWidget(self.exit_button, 4, 1, alignment=Qt.AlignmentFlag.AlignRight)
        self.grid_layout.addWidget(self.FeedLabel, 3, 1, alignment=Qt.AlignmentFlag.AlignCenter)
        self.grid_layout.addWidget(self.video_button, 4, 1, alignment=Qt.AlignmentFlag.AlignCenter)

        self.thread = VideoThread(self)

        self.thread.change_pixmap_signal.connect(self.update_image)

        self.thread.start()

    def closeEvent(self, event):
        self.thread.stop()
        event.accept()

    @pyqtSlot(np.ndarray)
    def update_image(self, cv_img):
        qt_img = self.convert_cv_qt(cv_img)
        self.FeedLabel.setPixmap(qt_img)
    
    def convert_cv_qt(self, cv_img):
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(int(MONITOR_WIDTH*0.445), int(MONITOR_HEIGHT*0.35), Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

    def send(self):
        try:
            text=self.chatTextField.text()
            tcpClientA.send(text.encode())
            self.chat.append(f"[{socket.gethostbyname(socket.gethostname())}] YOUR MESSAGE> "+text)
            self.chatTextField.setText("")
        except ConnectionResetError:
             self.chat.append(f"THERE'S NO ONE HOME")

    def clear(self):
        self.chat.setText("")
        self.chat.update()

    def exit(self):
        try:
            tcpClientA.send("EXIT_CODE_0xc0000".encode())
            os._exit(1)
        except OSError:
            os._exit(1)
               
class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self, window):
        super().__init__() 
        self.window=window
        self._run_flag = True

    def ImageUpdateSlot(self, Image):
        window.FeedLabel.setPixmap(QPixmap.fromImage(Image))

    def run(self):
        DELAY3 = 3
        DELAY5 = 5
        DELAY10 = 10
        retries = 0
        host = TCP_IP
        port = 7777
        BUFFER_SIZE = 1048576 
        global tcpClientA
        tcpClientA = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        while True:
            try:
                tcpClientA.connect((host, port))
                break
            except ConnectionRefusedError:
                if retries < 3:
                    window.chat.append(f"SERVER IS CURRENTLY OFFLINE RETRYING IN {str(DELAY3)} SECONDS")
                    time.sleep(int(DELAY3))
                elif retries < 6:
                    window.chat.append(f"SERVER IS CURRENTLY OFFLINE RETRYING IN {(DELAY5)} SECONDS")
                    time.sleep(int(DELAY5))
                elif retries < 9:
                    window.chat.append(f"SERVER IS CURRENTLY OFFLINE RETRYING IN {(DELAY10)} SECONDS")
                    time.sleep(int(DELAY10))
                else:
                    window.chat.append(f"SERVER SEEMS TO BE DOWN... EXITING")
                    time.sleep(2)
                    window.exit()
                retries += 1
                window.cls_button.click()
        data = tcpClientA.recv(BUFFER_SIZE)
        window.chat.append(f"CONNECTED TO [{data.decode()}]")

        # self.Worker1 = Worker1()
        # self.Worker1.start()
        # self.Worker1.ImageUpdate.connect(self.ImageUpdateSlot)
        
        while True:
            try:
                data = tcpClientA.recv(BUFFER_SIZE)
                print(len(data))
                if len(data) < 2_000:
                    window.chat.append(f"[{TCP_IP}] SERVER MESSAGE> " +data.decode("utf-8"))
                else:
                    buff = np.fromstring(data, np.uint8)
                    buff = buff.reshape(1, -1)
                    img = cv2.imdecode(buff, cv2.IMREAD_COLOR)
                    self.change_pixmap_signal.emit(img)
            except ConnectionResetError:
                continue

    def stop(self):
        self._run_flag = False
        self.wait()

class Worker1(QThread):
    ImageUpdate = pyqtSignal(QImage)
    def run(self):
            Capture = cv2.VideoCapture(0)
            while True:
                try:
                    ret, frame = Capture.read()  
                    if ret:
                        image_bytes = cv2.imencode('.jpg', frame)[1].tobytes()
                        tcpClientA.send(image_bytes)
                except ConnectionResetError:
                    break

if __name__ == '__main__':
    app = QApplication(sys.argv)
    global window
    window = Window()
    window.exec()
    sys.exit(app.exec_())